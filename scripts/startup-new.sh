#!/bin/bash

# Script ƒë·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng v·ªõi reset database ho√†n to√†n
# Version: 2.0 - HARD RESET MODE

echo "üöÄ Starting Secure Document Management System..."
echo "‚ö†Ô∏è SUPER HARD RESET MODE: Database s·∫Ω ƒë∆∞·ª£c x√≥a v√† t·∫°o l·∫°i ho√†n to√†n!"

# Thi·∫øt l·∫≠p c√°c bi·∫øn m√¥i tr∆∞·ªùng
if [ -n "$DATABASE_URL" ] && echo "$DATABASE_URL" | grep -q "postgres:"; then
    echo "üê≥ Running in Docker environment"
    
    # Parse DATABASE_URL ƒë·ªÉ l·∫•y th√¥ng tin k·∫øt n·ªëi
    DB_USER=$(echo $DATABASE_URL | sed -n 's/.*postgres:\/\/\([^:]*\):.*/\1/p')
    DB_PASSWORD=$(echo $DATABASE_URL | sed -n 's/.*postgres:\/\/[^:]*:\([^@]*\).*/\1/p')
    DB_HOST=$(echo $DATABASE_URL | sed -n 's/.*postgres:\/\/[^:]*:[^@]*@\([^:]*\).*/\1/p')
    DB_PORT=$(echo $DATABASE_URL | sed -n 's/.*postgres:\/\/[^:]*:[^@]*@[^:]*:\([^\/]*\).*/\1/p')
    DB_NAME=$(echo $DATABASE_URL | sed -n 's/.*postgres:\/\/[^:]*:[^@]*@[^:]*:[^\/]*\/\([^?]*\).*/\1/p')
    
    # Thi·∫øt l·∫≠p l·ªánh ch·ªù v√† k·∫øt n·ªëi
    WAIT_CMD="pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER"
    PSQL_CONNECT="psql postgres://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/postgres"
else
    echo "üíª Running in local environment"
    DB_HOST="localhost"
    DB_PORT="5432"
    DB_USER="postgres"
    DB_PASSWORD="postgres"
    DB_NAME="datn"
    
    WAIT_CMD="pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER"
    PSQL_CONNECT="psql -h $DB_HOST -p $DB_PORT -U $DB_USER"
fi

echo "‚è≥ Waiting for PostgreSQL to be ready..."
# TƒÉng s·ªë l·∫ßn th·ª≠ v√† th·ªùi gian ch·ªù
MAX_ATTEMPTS=60
ATTEMPT=0

while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
    ATTEMPT=$((ATTEMPT+1))
    
    if $WAIT_CMD; then
        echo "‚úÖ PostgreSQL is ready!"
        break
    else
        echo "PostgreSQL not ready yet (attempt $ATTEMPT/$MAX_ATTEMPTS). Waiting..."
        sleep 5
    fi
    
    if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
        echo "‚ö†Ô∏è PostgreSQL connection timeout - will continue anyway"
    fi
done

# ===== SUPER HARD RESET DATABASE =====
echo "üîÑ SUPER HARD RESET: X√≥a ho√†n to√†n v√† t·∫°o l·∫°i database t·ª´ ƒë·∫ßu..."

# 1. Ng·∫Øt k·∫øt n·ªëi hi·ªán c√≥
echo "üîå Closing all existing connections to $DB_NAME..."
$PSQL_CONNECT -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '$DB_NAME';" || echo "‚ö†Ô∏è Failed to terminate connections (non-critical)"

# 2. Drop database v·ªõi FORCE (PostgreSQL 13+)
echo "üóëÔ∏è Dropping database $DB_NAME..."
$PSQL_CONNECT -c "DROP DATABASE IF EXISTS $DB_NAME WITH (FORCE);" || \
$PSQL_CONNECT -c "DROP DATABASE IF EXISTS $DB_NAME;" || echo "‚ö†Ô∏è Failed to drop database (will continue)"

# 3. T·∫°m d·ª´ng ƒë·ªÉ ƒë·∫£m b·∫£o k·∫øt n·ªëi ƒë√£ ƒë√≥ng
sleep 3

# 4. T·∫°o l·∫°i database
echo "üÜï Creating database $DB_NAME..."
$PSQL_CONNECT -c "CREATE DATABASE $DB_NAME;" || echo "‚ö†Ô∏è Failed to create database (will continue)"

# ===== SETUP DATABASE =====
echo "üóÑÔ∏è Setting up database..."

# Sinh Prisma client
echo "üìã Generating Prisma client..."
npx prisma generate || echo "‚ö†Ô∏è Failed to generate Prisma client (will continue)"

# S·ª≠ d·ª•ng db push thay v√¨ migrate
echo "üìä Pushing schema to database..."
npx prisma db push --accept-data-loss --force-reset || echo "‚ö†Ô∏è Failed to push schema (will continue)"

# Seed database
echo "üå± Seeding database..."
npx prisma db seed || echo "‚ö†Ô∏è Failed to seed database (will continue)"

# ===== START APPLICATION =====
echo "üöÄ Starting application..."
if [ "$NODE_ENV" = "production" ]; then
    npm run start:prod
else
    npm run start:dev
fi