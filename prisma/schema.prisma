// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== CORE USER MANAGEMENT =====
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String    @unique
  passwordHash      String    @map("password_hash")
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  isActive          Boolean   @default(true) @map("is_active")
  lastLoginAt       DateTime? @map("last_login_at")
  // Auth tokens
  refreshTokenHash  String?   @map("refresh_token_hash")
  resetPasswordToken String?  @map("reset_password_token")
  resetPasswordExpires DateTime? @map("reset_password_expires")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  roleId            String    @map("role_id")
  role              Role      @relation(fields: [roleId], references: [id])
  
  departmentId      String?   @map("department_id")
  department        Department? @relation(fields: [departmentId], references: [id])
  
  // Document relations
  createdDocuments  Document[] @relation("DocumentCreator")
  approvedDocuments Document[] @relation("DocumentApprover")
  
  // Version relations
  createdVersions   DocumentVersion[] @relation("VersionCreator")
  
  // Attachment relations
  uploadedAttachments Attachment[] @relation("AttachmentUploader")
  
  // Comment relations
  comments          Comment[] @relation("CommentAuthor")
  
  // Notification relations
  notifications     Notification[] @relation("NotificationRecipient")
  
  // Signature relations
  signatureRequests SignatureRequest[] @relation("SignatureRequester")
  digitalSignatures DigitalSignature[] @relation("SignatureCreator")
  
  // Asset relations
  uploadedAssets    Asset[] @relation("AssetUploader")
  avatar            Asset? @relation("UserAvatar")
  
  // Audit relations
  auditLogs         AuditLog[] @relation("AuditLogUser")

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json     // Array of permission strings
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  users       User[]

  @@map("roles")
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  users       User[]
  documents   Document[] // Added relation to Document
  assets      Asset[]

  @@map("departments")
}

// ===== DOCUMENT MANAGEMENT =====
model Document {
  id              String    @id @default(cuid())
  title           String
  description     String?
  documentNumber  String    @unique @map("document_number")
  status          DocumentStatus @default(DRAFT)
  securityLevel   SecurityLevel @default(INTERNAL) @map("security_level")
  isConfidential  Boolean   @default(false) @map("is_confidential")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  creatorId       String    @map("creator_id")
  creator         User      @relation("DocumentCreator", fields: [creatorId], references: [id])
  
  approverId      String?   @map("approver_id")
  approver        User?     @relation("DocumentApprover", fields: [approverId], references: [id])

  departmentId    String?   @map("department_id")
  department      Department? @relation(fields: [departmentId], references: [id])

  versions        DocumentVersion[]
  attachments     Attachment[]
  assets          Asset[] @relation("DocumentAssets")
  tags            DocumentTag[]
  comments        Comment[]
  signatureRequests SignatureRequest[]
  auditLogs       AuditLog[] @relation("AuditLogDocument")

  @@map("documents")
}

model DocumentVersion {
  id              String    @id @default(cuid())
  versionNumber   Int       @map("version_number")
  filePath        String    @map("file_path")
  fileSize        Int       @map("file_size")
  checksum        String    // For integrity verification
  mimeType        String    @map("mime_type")
  isEncrypted     Boolean   @default(true) @map("is_encrypted")
  encryptionKey   String?   @map("encryption_key") // Encrypted key reference
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  documentId      String    @map("document_id")
  document        Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  creatorId       String    @map("creator_id")
  creator         User      @relation("VersionCreator", fields: [creatorId], references: [id])

  @@unique([documentId, versionNumber])
  @@map("document_versions")
}

model Attachment {
  id              String    @id @default(cuid())
  fileName        String    @map("file_name")
  originalName    String    @map("original_name")
  filePath        String    @map("file_path")
  fileSize        Int       @map("file_size")
  checksum        String
  mimeType        String    @map("mime_type")
  isEncrypted     Boolean   @default(true) @map("is_encrypted")
  encryptionKey   String?   @map("encryption_key")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  documentId      String    @map("document_id")
  document        Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  uploaderId      String    @map("uploader_id")
  uploader        User      @relation("AttachmentUploader", fields: [uploaderId], references: [id])

  @@map("attachments")
}

// ===== TAGGING SYSTEM =====
model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  color       String?
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  documents   DocumentTag[]

  @@map("tags")
}

model DocumentTag {
  id          String   @id @default(cuid())
  
  // Relations
  documentId  String   @map("document_id")
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  tagId       String   @map("tag_id")
  tag         Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([documentId, tagId])
  @@map("document_tags")
}

// ===== NOTIFICATION SYSTEM =====
model Notification {
  id          String              @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  isRead      Boolean             @default(false) @map("is_read")
  createdAt   DateTime            @default(now()) @map("created_at")

  // Relations
  recipientId String              @map("recipient_id")
  recipient   User                @relation("NotificationRecipient", fields: [recipientId], references: [id])

  @@map("notifications")
}

// ===== COMMENT SYSTEM =====
model Comment {
  id          String   @id @default(cuid())
  content     String
  isInternal  Boolean  @default(false) @map("is_internal") // Internal comments for approval workflow
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  documentId  String   @map("document_id")
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  authorId    String   @map("author_id")
  author      User     @relation("CommentAuthor", fields: [authorId], references: [id])

  @@map("comments")
}

// ===== DIGITAL SIGNATURE SYSTEM =====
model SignatureRequest {
  id              String              @id @default(cuid())
  status          SignatureStatus     @default(PENDING)
  requestedAt     DateTime            @default(now()) @map("requested_at")
  signedAt        DateTime?           @map("signed_at")
  expiresAt       DateTime            @map("expires_at")
  signatureType   SignatureType       @map("signature_type")
  reason          String?

  // Relations
  documentId      String              @map("document_id")
  document        Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  requesterId     String              @map("requester_id")
  requester       User     @relation("SignatureRequester", fields: [requesterId], references: [id])
  
  signatures      DigitalSignature[]

  @@map("signature_requests")
}

model DigitalSignature {
  id              String    @id @default(cuid())
  signatureData   String    @map("signature_data") // Encrypted signature data
  certificateInfo Json      @map("certificate_info") // Certificate information
  signedAt        DateTime  @default(now()) @map("signed_at")
  ipAddress       String?   @map("ip_address")
  userAgent       String?   @map("user_agent")

  // Relations
  requestId       String    @map("request_id")
  request         SignatureRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  
  signerId        String    @map("signer_id")
  signer          User      @relation("SignatureCreator", fields: [signerId], references: [id])

  @@map("digital_signatures")
}

// ===== ASSET MANAGEMENT =====
model Asset {
  id                String    @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  filename          String
  s3Url             String    @map("s3_url")
  contentType       String?   @map("content_type")
  sizeBytes         BigInt?   @map("size_bytes")
  isCover           Boolean   @default(false) @map("is_cover")
  createdAt         DateTime  @default(now()) @map("created_at")

  // Relations
  ownerDocumentId   String?   @map("owner_document_id")
  ownerDocument     Document? @relation("DocumentAssets", fields: [ownerDocumentId], references: [id], onDelete: Cascade)
  
  uploadedById      String?   @map("uploaded_by")
  uploadedBy        User?     @relation("AssetUploader", fields: [uploadedById], references: [id])
  
  departmentId      String?   @map("department_id")
  department        Department? @relation(fields: [departmentId], references: [id])
  
  // User avatar relation
  userAvatarId      String?   @unique @map("user_avatar_id")
  userAvatar        User?     @relation("UserAvatar", fields: [userAvatarId], references: [id])

  @@map("assets")
}

// ===== AUDIT SYSTEM =====
model AuditLog {
  // cspell:disable-next-line
  id          String        @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  action      String        // CREATE, READ, UPDATE, DELETE, APPROVE, SIGN, etc.
  resource    String        // Document, User, Role, etc.
  resourceId  String        @map("resource_id") // ID of the affected resource
  details     Json?         // Additional details about the action
  ipAddress   String?       @map("ip_address")
  userAgent   String?       @map("user_agent")
  timestamp   DateTime      @default(now())

  // Relations
  userId      String?       @map("user_id")
  user        User?         @relation("AuditLogUser", fields: [userId], references: [id])
  
  documentId  String?       @map("document_id")
  document    Document?     @relation("AuditLogDocument", fields: [documentId], references: [id])

  @@map("audit_logs")
}

// ===== ENUMS =====
enum DocumentStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  ARCHIVED
}

enum SecurityLevel {
  PUBLIC
  INTERNAL
  CONFIDENTIAL
  SECRET
  TOP_SECRET
}

enum NotificationType {
  DOCUMENT_CREATED
  DOCUMENT_UPDATED
  APPROVAL_REQUESTED
  APPROVAL_GRANTED
  APPROVAL_REJECTED
  SIGNATURE_REQUESTED
  SIGNATURE_COMPLETED
  SYSTEM_ALERT
}

enum SignatureStatus {
  PENDING
  SIGNED
  EXPIRED
  CANCELLED
}

enum SignatureType {
  ELECTRONIC
  DIGITAL
  ADVANCED_DIGITAL
  QUALIFIED_DIGITAL
}
